#
# Author: Alexander Dean <dstar@csh.rit.edu>
# Copyright (c) 2011, RailComm LLC
# All rights reserved. Redistribution and use in source and binary forms, with 
# or without modification are permitted provided that the conditions are met 
# under the Modified BSD License.
#

##
#
# DO NOT EDIT THIS FILE!!!!!!!!!!!!!
#
##
# This file is used to house a bunch of the strings that is cluttering up a 
# lot of the files. You could use this file as a help guide with how much info
# is in here. :P
##

##
# Parser Commands 
##
prsr_PARSE='parse'
prsr_PARSE_help='parsing files/directories into stdout or other files/dirs'
prsr_PARSE_desc= \
"""Provides a bunch of cool utilites for parsing all the files in your project.
This differs from 'search' in that you don't have to write your own queries, they 
are pre-built for certain occasions.
"""

#subparsers########
subprsr_RCS='rcs'
subprsr_RCS_help='For parsing your resource files'
subprsr_RCS_desc= \
"""Resource files contain a lot of interesting and helpful information if your
project is using them correctly. The most useful bit of information is the 
strings used in your GUI, and menus. These strings need to be accessable so that
you can translate and localize all of them. This is kind of tough when they are 
all in separate files. LiVSs can grab these strings and copy them out, and then
when you want to, overwrite them back in.
"""

subprsr_CSV='csv'
subprsr_CSV_help='For parsing your database dumps and tables, aka comma separated value files'
subprsr_CSV_desc= \
"""LiVSs utilizes CSV files a lot for how it pulls information out of your
resources and source code. CSV files can be read in all modern spreadsheet 
editors like Excel and OpenOffice Calc. They are useful because they make it 
easy to compare lots of information and are easy to parse back out into your
resourses.
"""

subprsr_CODE='code'
subprsr_CODE_help='For parsing your source code'
subprsr_CODE_desc= \
"""Your source code probably has a lot of short cuts for the time being like me.
Popups without resource strings, TODO tasks all over the place. Well LiVSs can
find all of those for you and show you where you can patch those before your 
source becomes horrifically decentralized.
"""
###########

prsr_EXPORT='export'
prsr_EXPORT_help='export the content of a file into another, has several quick commands'
prsr_EXPORT_desc=\
"""There are three levels of exporting in LiVSs; Language level (a single resource
file for a single language), Project Level (one or more resources for one project in
particular, aka one directory), and System Level (one or more resources for each 
project in an entire solution, aka a directory of directories). LiVSs can handle 
all three levels and maintain order/language codes/etc. These exports can export
menus, dialogs, and string tables at all three levels.
"""

#####################
subprsr_UTIL='util'
subprsr_UTIL_help='options for dumping utility files from the input target'
subprsr_UTIL_desc= \
"""Utility files are files devoted to housing as much information about a particular
aspect of localization as possible. In the terms of standard resource files, there are
three things that need to be localized: Menus, Dialogs, and String Tables. These three
things get their own files so that they can be individually parsed without having to 
go searching through the original resources.
"""

subprsr_TRANSLATOR='translator'
subprsr_TRANSLATOR_help='options for dumping translator files from the input target'
subprsr_TRANSLATOR_desc= \
"""Translator files are a combination of all three types of utility files. They 
are merged to reduce the number of 'like' strings to reduce translation costs.
They can be pulled back out into the original system files, as well as pushed back
in. So once a translation has been done, it can be trickled back into their 
original resource files.
"""
#####################

prsr_UPDATE='update'
prsr_UPDATE_help='update a file with the content of another. See info on utility files.'
prsr_UPDATE_desc= \
"""This is the sister function to export. It allows for the pushing back of content
from either a utility file or a translator file back into resource files.
"""

prsr_SEARCH='search'
prsr_SEARCH_help='similar to parse but strictly for locating strings'
prsr_SEARCH_desc= \
"""Search differs from 'parse' in that you can hand select the string(s) that 
LiVSs looks for. You could even give LiVSs a Regular Expression to parse
all the files for. However if there is something specific you would like to 
search for, make sure the 'parse' command doesn't do it before you try to hand
craft a search for it.
"""

prsr_STATS='stats'
prsr_STATS_help='get statistics on files/dirs'
prsr_STATS_desc= \
"""Have you ever wondered how many lines of code your program has, or the length
of time between your oldest code and your newest? No? Well I have, thats why 
LiVSs can compile a bunch of weird statistics on your project.
"""

prsr_BKUP='bkup'
prsr_BKUP_help='copy/compress directories easy, can filter based on extension'
prsr_BKUP_desc= \
"""Backing all your source code out of a directory tree with binaries, giant
resource files and other useless information can be a pain. With LiVSs you
can grab only the files you want based on file extension and save them to 
another directory or go ahead and compress them to send off to a friend.
"""

prsr_SCRIPT='script'
prsr_SCRIPT_help='run LiVSs script via a path'
prsr_SCRIPT_desc= \
"""LiVSs can do a lot, and has a lot of confusing arguments, remembering 
them all to keep running them over and over is a pain. For this reason you 
can save your queries into LiVSs scripts to bundle with your backups or
outputs to know how you got them. For more information on how to write these
scripts, see the HOWTO document in the DOCS directory.
"""

prsr_outopt_epilog= \
"""Output options are: 'csv', 'stdout', 'xml', and 'flat'. The default output
option is 'csv'. CSV and XML are both useful if the output of the parse will
eventually be parsed again. But if you want something more human readable, the
flat file or csv is useful. If you want something JUST for the timebeing or just
to check something, choose stdout.
"""

# Useful for queries
TOP_LEVEL_PARSERS  = [prsr_PARSE, prsr_EXPORT, prsr_UPDATE, prsr_SEARCH, prsr_STATS, prsr_BKUP, prsr_SCRIPT]
PARSER_SUB_PARSERS = [subprsr_RCS, subprsr_CODE, subprsr_CSV]
EXPORT_SUB_PARSERS = [subprsr_UTIL, subprsr_TRANSLATOR] 
