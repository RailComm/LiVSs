#
#     This file intends to be a running FAQ of how the internals of LiVSs 
# works. If there is something missing, or something is incomplete/inaccurate,
# please fix it and/or let someone who is working on LiVSs know.
#
###############################################################################

~What versions of Visual Studio does LiVSs work for?
    It works only on VS2010 RC files. This is typically only for C++ projects
solutions. However this library could be used to make RC files work for Python
based projects as well.


~What is a Menu File?
	It is an XML style file that can hold one or more menus, each with one or 
more language code that can be parsed out of and back into resource files.


~What is a Dialog file?
	It is a CSV style file that can hold one or more dialogs each with one or 
more language code that can be parsed out of and back into resource files.


~What is a String Table file?
	It is a CSV style file that can hold one or more string table each with 
one or more language code that can be parsed out of and back into resource 
files.


~What is a translator file?
	A translator file is an XLS style file, that is a compilation of each of 
the above mentioned files (one menu, one dialog, and one string table file).


~What is a Utility file?
    A utility file is my way of saying its either a menu, dialog, or string 
table file. So when I say a translator file is made up of all three utility
files, that means that its a combination of a menu, dialog and string table
files. 


~Why are there three different files generated when I export a project?
	Well, thats because we want to keep track of three different things within
a resource file; and each of these things has different structures (ie menus
need a tree structure, whereas a String TABLE needs a tabular structure). This
also makes it easier to get what information we need quicker. 
	- To search for something, we can utilize the object structures of these
	files rather than silly regex on the original resource.
	- We can also house multiple resource files in a single file, hence the
	term MASTER menu file, MASTER dialog file, and MASTER string table. All 
	of these are generated by merging all of the smaller level files.
	
	
~Why are there levels of utility files?
	(Sub-question, there are levels of utility files?!?)
 - Yes, there are levels of utility files. By levels I mean: you can 
generate a utility file for the WHOLE SYSTEM! Or just one project, or just 
one language of a project. So there are three levels of utility file: 
LanguageLevel, ProjectLevel, and SystemLevel. These can be specified when 
pulling data.


~What are the use of these levels?
	The level'd utility file approach has two major advantages. First, it makes
the push-back functionality easier as we can hide a lot of the nitty-gritty 
reg-ex stuff in each layer. Then secondly, it saves us time when generating 
translator files. As an example: it takes 55 seconds to generate our system
level translator file without system level utility files. But if the system
level utility files already existed, then that time is easily cut in half.



######################
# Questions about internal implementation:
###

~Internal Steps to get a MASTER translator file:
By MASTER translator file I'm assuming you mean SystemLevel translator file:
1. Given a directory walk through to find all of the projects
	a. For each project
		I. Generate a Menu, Dialog, and String table file for each RC/H file 
		   group.
	    II. Merge 'like' files together to get project level files
			1. merge all menu files together
			2. merge all dialog files together
			3. merge all string table files together
		III. save all project level files to separate location.
	b. For each Project level utility File group
		I. Merge all 'like' files together into System level files :P
			1. merge all menu files together
			2. merge all dialog files together
			3. merge all string table files together
		III. Save all System level files in a sub directory of the source files.
2. Generate Translator file.
	a. Turn System level Menus file into CSV
	b. Make copies of Dialogs and Stringtable csv files
	c. Push copies and csv version of menu file into one XLS file.
		I. Create new XLS file in same directory.
		II. Push each csv (menus, dialogs, stringtable) into a separate table.
		III. Save XLS file.
3. Open master translator file. 

~How are Utility files utilized under the hood?
    Utility files are used as building blocks in a pipeline to get to and from
translator files and resource files. The pipeline is like this:
   Translator -+
                \
          System Level Utilities -+
                                   \
                            Project Level Utilities -+
                                                      \
                                           Language Level Utilities -+
                                                                      \
                                                                 Resource Files
  There is a very fine difference between project level utilities and language 
level. The ONLY difference is that language level only has one language, 
structurally they are the exact same as a project level file. This means that 
many instances we skip the language level step and just filter the project
utility based on language.
                            
                          
~What are possible problems that were found when EXPORTING?

 Menus:
    When exporting menus there is only one problem that can occur. There were 
issues when LiVSs found the same string ID in two different places on the
tree. This can cause problems if LiVSs things that since the subnodes are
the same as another one, the two Popups might get merged. (The chances of this
happening have been reduced as of changelist 23113.)                        
                          
 Dialogs:
    There is a minor difficulty when parsing dialogs as there is "static" 
content all with the same ID, so when LiVSs was first written it was merging
all of that data and loosing a lot of strings. This has since been corrected by
holding the string with the id: IDC_STATIC.# (where # is the number the static
string falls in, i.e. IDC_STATIC.0 is the first static string found in the 
dialog, IDC_STATIC.1 is the second, and so on).

 String Tables:
     There are no difficulties parsing this, VS should have made all strings
reside in the string table.


~What are possible problems that were found when UPDATING?
  
 Menus:
 	When pushing a menu back into its original spot, getting the separators
into the right order was a lot of trouble. To do this the `order` attribute
was added to all nodes to keep track of their locations. This also made 
node comparisons a tad bit easier.

 Dialogs:
    Pushing the strings back took a bit of work as the reg-ex can't tell me
which static string im pushing back and order isn't maintained in translator
files. Also dialogs without strings are deleted from translator files so there
is no record of them when trying to push back (we had to change the algorithm
so as to not delete them from the file when pushing back, eek!!).

 String tables:
     These are easy to push back. Again... everything should have just been in
the string table. Computationally less expensive and only giving up a tiny bit
of HDD space.



~ Glossary?
  There are some words that I use interchangeably throughout the documentation
that may confuse. I also tend to use 'similar' words that mean something
completely different.

Combine/Merge = To push two files of the same type, and project into the same
				file or object. This is done to condense all language codes
				for a SINGLE project into one file. (ie 1+ resource files,
				ALWAYS turns out to be only 3 files for that project.)
				
Join(ing) = To combine two or more files of the same or different type and
			definitely different projects into one or more files. This is
			done when we are creating the master files for our entire system.
			
Pushing = To off-load content onto/into another system of management. (ie
		  pushing a file into memory means reading all the information in
		  that file into an object that we can work with).
		  
Parsing/Reading = To open and look at a file line by line looking for key
				  bits of information that we can save for later.


			                    
                          
                          
                          
                          
                          
                          
                          
                          
                          
                          
                          
                          
                          
                          